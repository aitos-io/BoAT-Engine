/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: fabric_network.proto */

#ifndef PROTOBUF_C_fabric_5fnetwork_2eproto__INCLUDED
#define PROTOBUF_C_fabric_5fnetwork_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Common__FabricNetworks Common__FabricNetworks;
typedef struct _Common__FabricNetworkData Common__FabricNetworkData;
typedef struct _Common__FabricNodesCfg Common__FabricNodesCfg;
typedef struct _Common__FabricNodeLayoutCfg Common__FabricNodeLayoutCfg;
typedef struct _Common__FabricNodeGroupCfg Common__FabricNodeGroupCfg;
typedef struct _Common__FabricNodeInfo Common__FabricNodeInfo;


/* --- enums --- */


/* --- messages --- */

struct  _Common__FabricNetworks
{
  ProtobufCMessage base;
  uint32_t networknum;
  Common__FabricNetworkData *networks;
};
#define COMMON__FABRIC_NETWORKS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&common__fabric_networks__descriptor) \
    , 0, NULL }


struct  _Common__FabricNetworkData
{
  ProtobufCMessage base;
  uint32_t index;
  char *accountcertcontent;
  char *accountclienttlsprikey;
  char *accountclienttlscert;
  /*
   * string tlsClientCertContent = 5 ;
   * fabricNodesCfg nodes = 4;
   * uint32 layoutNum = 4;
   */
  size_t n_layoutcfg;
  Common__FabricNodeLayoutCfg **layoutcfg;
  Common__FabricNodeGroupCfg *ordercfg;
};
#define COMMON__FABRIC_NETWORK_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&common__fabric_network_data__descriptor) \
    , 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, NULL }


struct  _Common__FabricNodesCfg
{
  ProtobufCMessage base;
  /*
   * uint32 layoutNum = 1;
   */
  size_t n_layoutcfg;
  Common__FabricNodeLayoutCfg **layoutcfg;
  Common__FabricNodeGroupCfg *ordercfg;
};
#define COMMON__FABRIC_NODES_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&common__fabric_nodes_cfg__descriptor) \
    , 0,NULL, NULL }


struct  _Common__FabricNodeLayoutCfg
{
  ProtobufCMessage base;
  /*
   * uint32 groupNum = 1;
   */
  size_t n_groupcfg;
  Common__FabricNodeGroupCfg **groupcfg;
};
#define COMMON__FABRIC_NODE_LAYOUT_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&common__fabric_node_layout_cfg__descriptor) \
    , 0,NULL }


struct  _Common__FabricNodeGroupCfg
{
  ProtobufCMessage base;
  uint32_t quantities;
  /*
   *  uint32 nodeNum = 2;
   */
  size_t n_endorser;
  Common__FabricNodeInfo **endorser;
  char *tlsorgcertcontent;
};
#define COMMON__FABRIC_NODE_GROUP_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&common__fabric_node_group_cfg__descriptor) \
    , 0, 0,NULL, (char *)protobuf_c_empty_string }


struct  _Common__FabricNodeInfo
{
  ProtobufCMessage base;
  char *nodeurl;
  char *hostname;
};
#define COMMON__FABRIC_NODE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&common__fabric_node_info__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/* Common__FabricNetworks methods */
void   common__fabric_networks__init
                     (Common__FabricNetworks         *message);
size_t common__fabric_networks__get_packed_size
                     (const Common__FabricNetworks   *message);
size_t common__fabric_networks__pack
                     (const Common__FabricNetworks   *message,
                      uint8_t             *out);
size_t common__fabric_networks__pack_to_buffer
                     (const Common__FabricNetworks   *message,
                      ProtobufCBuffer     *buffer);
Common__FabricNetworks *
       common__fabric_networks__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   common__fabric_networks__free_unpacked
                     (Common__FabricNetworks *message,
                      ProtobufCAllocator *allocator);
/* Common__FabricNetworkData methods */
void   common__fabric_network_data__init
                     (Common__FabricNetworkData         *message);
size_t common__fabric_network_data__get_packed_size
                     (const Common__FabricNetworkData   *message);
size_t common__fabric_network_data__pack
                     (const Common__FabricNetworkData   *message,
                      uint8_t             *out);
size_t common__fabric_network_data__pack_to_buffer
                     (const Common__FabricNetworkData   *message,
                      ProtobufCBuffer     *buffer);
Common__FabricNetworkData *
       common__fabric_network_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   common__fabric_network_data__free_unpacked
                     (Common__FabricNetworkData *message,
                      ProtobufCAllocator *allocator);
/* Common__FabricNodesCfg methods */
void   common__fabric_nodes_cfg__init
                     (Common__FabricNodesCfg         *message);
size_t common__fabric_nodes_cfg__get_packed_size
                     (const Common__FabricNodesCfg   *message);
size_t common__fabric_nodes_cfg__pack
                     (const Common__FabricNodesCfg   *message,
                      uint8_t             *out);
size_t common__fabric_nodes_cfg__pack_to_buffer
                     (const Common__FabricNodesCfg   *message,
                      ProtobufCBuffer     *buffer);
Common__FabricNodesCfg *
       common__fabric_nodes_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   common__fabric_nodes_cfg__free_unpacked
                     (Common__FabricNodesCfg *message,
                      ProtobufCAllocator *allocator);
/* Common__FabricNodeLayoutCfg methods */
void   common__fabric_node_layout_cfg__init
                     (Common__FabricNodeLayoutCfg         *message);
size_t common__fabric_node_layout_cfg__get_packed_size
                     (const Common__FabricNodeLayoutCfg   *message);
size_t common__fabric_node_layout_cfg__pack
                     (const Common__FabricNodeLayoutCfg   *message,
                      uint8_t             *out);
size_t common__fabric_node_layout_cfg__pack_to_buffer
                     (const Common__FabricNodeLayoutCfg   *message,
                      ProtobufCBuffer     *buffer);
Common__FabricNodeLayoutCfg *
       common__fabric_node_layout_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   common__fabric_node_layout_cfg__free_unpacked
                     (Common__FabricNodeLayoutCfg *message,
                      ProtobufCAllocator *allocator);
/* Common__FabricNodeGroupCfg methods */
void   common__fabric_node_group_cfg__init
                     (Common__FabricNodeGroupCfg         *message);
size_t common__fabric_node_group_cfg__get_packed_size
                     (const Common__FabricNodeGroupCfg   *message);
size_t common__fabric_node_group_cfg__pack
                     (const Common__FabricNodeGroupCfg   *message,
                      uint8_t             *out);
size_t common__fabric_node_group_cfg__pack_to_buffer
                     (const Common__FabricNodeGroupCfg   *message,
                      ProtobufCBuffer     *buffer);
Common__FabricNodeGroupCfg *
       common__fabric_node_group_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   common__fabric_node_group_cfg__free_unpacked
                     (Common__FabricNodeGroupCfg *message,
                      ProtobufCAllocator *allocator);
/* Common__FabricNodeInfo methods */
void   common__fabric_node_info__init
                     (Common__FabricNodeInfo         *message);
size_t common__fabric_node_info__get_packed_size
                     (const Common__FabricNodeInfo   *message);
size_t common__fabric_node_info__pack
                     (const Common__FabricNodeInfo   *message,
                      uint8_t             *out);
size_t common__fabric_node_info__pack_to_buffer
                     (const Common__FabricNodeInfo   *message,
                      ProtobufCBuffer     *buffer);
Common__FabricNodeInfo *
       common__fabric_node_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   common__fabric_node_info__free_unpacked
                     (Common__FabricNodeInfo *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Common__FabricNetworks_Closure)
                 (const Common__FabricNetworks *message,
                  void *closure_data);
typedef void (*Common__FabricNetworkData_Closure)
                 (const Common__FabricNetworkData *message,
                  void *closure_data);
typedef void (*Common__FabricNodesCfg_Closure)
                 (const Common__FabricNodesCfg *message,
                  void *closure_data);
typedef void (*Common__FabricNodeLayoutCfg_Closure)
                 (const Common__FabricNodeLayoutCfg *message,
                  void *closure_data);
typedef void (*Common__FabricNodeGroupCfg_Closure)
                 (const Common__FabricNodeGroupCfg *message,
                  void *closure_data);
typedef void (*Common__FabricNodeInfo_Closure)
                 (const Common__FabricNodeInfo *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor common__fabric_networks__descriptor;
extern const ProtobufCMessageDescriptor common__fabric_network_data__descriptor;
extern const ProtobufCMessageDescriptor common__fabric_nodes_cfg__descriptor;
extern const ProtobufCMessageDescriptor common__fabric_node_layout_cfg__descriptor;
extern const ProtobufCMessageDescriptor common__fabric_node_group_cfg__descriptor;
extern const ProtobufCMessageDescriptor common__fabric_node_info__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_fabric_5fnetwork_2eproto__INCLUDED */
